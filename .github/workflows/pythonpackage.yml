name: Test

on:
  - pull_request

jobs:

  test_linux:

    runs-on: ubuntu-22.04
    strategy:
      fail-fast: true
      max-parallel: 3
      matrix:
        python-version: [3.9, '3.10', '3.11', '3.12']

    steps:

    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip' # caching pip dependencies
        allow-prereleases: true

    - name: setup apt dependencies
      run: |
        sudo apt-get update
        sudo apt-get install xvfb qt6-base-dev libhdf5-serial-dev libnetcdf-dev build-essential
        sudo apt-get install '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev

        python -m pip install --upgrade pip

    - name: Test with pytest
      env:
        MPLBACKEND: agg
      run: |
        python -m pip install --upgrade pip
        python -m pip install wheel build
        python -m build
        python -m pip install dist/*.whl
        pip install -r .requirements.txt

        # uses xvfb for GUI part of the test
        pushd tools
        xvfb-run pytest --pyargs refnx
        popd

        # check that refnx gui starts
        # python tools/app/check_app_starts.py refnx

    - name: Make sdist
      if: ${{ matrix.python-version == '3.9' }}
      run: |
        git clean -xdf
        python setup.py sdist

    - uses: actions/upload-artifact@v4
      if: ${{ matrix.python-version == '3.9' }}
      with:
        name: refnx-wheel-linux-${{ matrix.python-version }}
        path: dist/


#  linux_wheels:
#
#    runs-on: ubuntu-latest
#    strategy:
#      max-parallel: 2
#      matrix:
#        PLAT: ["manylinux2014_x86_64"]
#
#    steps:
#    - uses: actions/checkout@v4
#    - name: Make Linux Wheel
#      run: |
#        docker run --rm -e="PLAT=${{ matrix.PLAT }}" -v $(pwd):/io quay.io/pypa/${{ matrix.PLAT }} /bin/bash /io/tools/build_manylinux_wheels.sh
#
#    - uses: actions/upload-artifact@v3
#      with:
#        name: refnx-wheel
#        path: dist/


  test_macos:

    runs-on: macos-13
    strategy:
      fail-fast: true
      max-parallel: 3
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip' # caching pip dependencies
        allow-prereleases: true

    - run: mkdir -p dist

    - name: Install openmp
      run: |
        brew install libomp

    - name: Make wheel
      env:
        CC: /usr/bin/clang
        CXX: /usr/bin/clang++
        CXXFLAGS: "-Xpreprocessor -fopenmp -I/usr/local/opt/libomp/include"
        CFLAGS: "-Xpreprocessor -fopenmp -I/usr/local/opt/libomp/include"
        LDFLAGS: "-L/usr/local/opt/libomp/lib -lomp"
        DYLD_LIBRARY_PATH: /usr/local/opt/libomp/lib
      run: |
        python -m pip install --upgrade pip
        python -m pip install wheel delocate build
        python -m build .
        # so that libomp is distributed with wheel
        delocate-wheel -v dist/refnx*.whl

    - name: Install package and test with pytest
      env:
        MPLBACKEND: agg
      run: |
        pip install -r .requirements.txt
        pushd dist
        python -m pip install --only-binary=refnx --no-index --find-links=. refnx

        pytest --pyargs refnx

        popd

    - name: Make frozen GUI executable
      if: ${{ matrix.python-version == '3.10' }}
      run: |
        # make app in virtualenv
        python -m venv app
        source app/bin/activate
        python -m pip install --upgrade --upgrade-strategy eager -r tools/app/requirements.txt
        # pin scipy 1.7.3 because of pyinstaller doesn't like arm64 bing in libgfortran.dylib
        python -m pip install scipy
        pushd dist
        python -m pip install --only-binary=refnx --no-index --find-links=. refnx
        popd
        python -m pip install pyinstaller psutil
        # compileall in an effort to speedup pyinstaller GUI start
        python -m compileall

        pushd tools/app
        pyinstaller motofit.spec

        # check to see that the app starts
        python check_app_starts.py dist/motofit.app/Contents/MacOS/motofit

        zip -r -X dist/motofit.app.zip dist/motofit.app/
        mv dist/motofit.app.zip ../../dist/
        popd

    - uses: actions/upload-artifact@v4
      with:
        name: refnx-wheel-macos-${{ matrix.python-version }}
        path: dist/


  test_win:

    runs-on: windows-latest
    strategy:
      fail-fast: true
      max-parallel: 3
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip' # caching pip dependencies
        allow-prereleases: true

    - run: pip install -r .requirements.txt

    - run: mkdir -p dist

    - name: Make wheel
      run: |
        python -m pip install --upgrade pip
        python -m pip install wheel
        python -m pip wheel . --no-deps -w dist

    - name: Install package and test with pytest
      if: ${{ matrix.python-version == '3.10' }}
      env:
        PYOPENCL_CTX: 0
      run: |
        cd dist
        python -m pip install --only-binary=refnx --no-index --find-links=. refnx

        #        python -m pip install pytools mako cffi
        #        choco install opencl-intel-cpu-runtime
        #        python -m pip install --only-binary=pyopencl --find-links http://www.silx.org/pub/wheelhouse/ --trusted-host www.silx.org pyopencl

        pytest --pyargs refnx
        cd ..

    - name: Check refnx gui starts
      if: ${{ matrix.python-version == '3.10' }}
      run: |
        # check that refnx gui starts
        pip install psutil
        python tools/app/check_app_starts.py refnx

    - name: Make frozen GUI executable
      if: ${{ matrix.python-version == '3.10' }}
      run: |
        # make app in virtualenv
        pip uninstall -y h5py
        python -m venv app
        app\Scripts\activate.bat
        python -m pip install --upgrade --upgrade-strategy eager -r tools/app/requirements.txt
        cd dist
        python -m pip install --only-binary=refnx --no-index --find-links=. refnx
        cd ..

        # fix for multiprocessing on Py3.9 is not merged in PyInstaller
        # if you are on Py3.7 you can just pip install pyinstaller
        # pip install git+https://github.com/andyfaff/pyinstaller.git@gh4865

        cd tools\app
        pyinstaller motofit.spec
        move dist\motofit.exe ..\..\dist\
        cd ..\..

    - uses: actions/upload-artifact@v4
      with:
        name: refnx-wheel-win-${{ matrix.python-version }}
        path: dist/


  build_doc:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: setup apt dependencies
      run: |
        sudo apt-get update
        sudo apt-get install pandoc

    - name: Build documentation
      run: |
        python -m pip install --upgrade pip
        python -m pip install .
        python -m pip install wheel
        cd doc
        python -m pip install -r requirements.txt
        make html

  lint:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Lint with flake8 and black
      run: |
        python -m pip install flake8 black
        # stop the build if there are Python syntax errors or undefined names
        # the ignores are taken care of by black

        flake8 --ignore=F401,E501,W504,W503,E203,E231 --count --show-source --statistics --exclude=refnx/_lib/emcee,refnx/reflect/_app/resources_rc.py,refnx/_lib/ptemcee refnx
        black --check --exclude="refnx/_lib/emcee/|refnx/_lib/ptemcee/" refnx -l 79
