# This action releases refnx on PyPI for every version tagged commit (e.g. v0.0.1)
name: PyPI/Github Release

on:
  push:
    tags:
      - "v*"

jobs:
  build_wheels:
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    strategy:
      matrix:
        os: [windows-latest, macos-14]

    steps:
      - uses: actions/checkout@v4

      - name: Setup macOS
        if: startsWith( matrix.os, 'macos' )
        run: |
          brew install libomp
          LIBOMP_LIB="$(brew --prefix libomp)"
          brew install libomp
          CC=gcc-13
          CXX=g++13
          CXXFLAGS="$CXXFLAGS -I$LIBOMP_LIB/include -Xpreprocessor -fopenmp"
          CFLAGS="$CFLAGS -I$LIBOMP_LIB/include"
          LDFLAGS="$LDFLAGS -L$LIBOMP_LIB/lib -lomp"
          DYLD_LIBRARY_PATH=$LIBOMP_LIB/lib          

          CIBW="MACOSX_DEPLOYMENT_TARGET=12.0\
            CC=$CC\
            DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH\
            CXX=$CXX\
            CXXFLAGS=$CXXFLAGS
            CFLAGS=$CFLAGS
            LD_FLAGS=$LD_FLAGS"
          echo "CIBW_ENVIRONMENT_MACOS=$CIBW" >> "$GITHUB_ENV"

          CIBW="DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH delocate-listdeps {wheel} &&\
            DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH delocate-wheel --require-archs \
            {delocate_archs} -w {dest_dir} {wheel}"
          echo "CIBW_REPAIR_WHEEL_COMMAND_MACOS=$CIBW" >> "$GITHUB_ENV"

      - name: build wheels
        uses: pypa/cibuildwheel@v2.17.0
        env:
          CIBW_TEST_COMMAND: pytest --pyargs refnx.reflect.test.test_reflect
          CIBW_ARCHS_MACOS: "x86_64 arm64"

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl


  build_linux_x86_64_wheels:
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v4

      - name: build wheels
        uses: pypa/cibuildwheel@v2.16.5
        env:
          CIBW_TEST_COMMAND: pytest --pyargs refnx.reflect.test.test_reflect
          CIBW_BUILD: "*-manylinux_x86_64"

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-manylinux
          path: ./wheelhouse/*.whl


  build_linux_musl_wheels:
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v4

      - name: build wheels
        uses: pypa/cibuildwheel@v2.16.5
        env:
          CIBW_TEST_COMMAND: pytest --pyargs refnx.reflect.test.test_reflect
          CIBW_BUILD: "*-musllinux_x86_64"

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux
          path: ./wheelhouse/*.whl


  make_sdist:
    name: Make sdist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Build sdist
      run: pipx run build --sdist

    - uses: actions/upload-artifact@v4
      with:
        name: wheels-sdist
        path: dist/*.tar.gz


  check-version:
    runs-on: ubuntu-latest
    needs: [build_linux_musl_wheels, build_linux_x86_64_wheels, build_wheels, make_sdist]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
    - uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        merge-multiple: true
        path: dist
    - name: Check version
      run: |
        python -m pip install numpy scipy orsopy
        ls dist
        python -m pip install --only-binary=refnx --no-index --find-links=dist refnx
        cd dist
        RNX_VERSION="$(python -c "import refnx;print(refnx.version.release)")"
        cd ..
        if  [ $RNX_VERSION == "True" ]; then
          echo "It's a release version of refnx"
          else
            echo "This is not a release version of refnx"
            exit 1
        fi


  pypi-publish:
    name: Upload release to PyPI
    runs-on: ubuntu-latest
    needs: [check-version]
    environment:
      name: pypi
      url: https://pypi.org/p/refnx
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
    - uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        merge-multiple: true
        path: dist

    - name: Upload to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # repository-url: https://test.pypi.org/legacy/
        skip_existing: true


  release-github:
    runs-on: ubuntu-latest
    needs: [ pypi-publish ]

    steps:
    - uses: actions/checkout@v4

    - uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        merge-multiple: true
        path: dist

    - uses: ncipollo/release-action@v1
      with:
        artifacts: "dist/refnx*.tar.gz"
        token: ${{ secrets.GITHUB_TOKEN }}
        allowUpdates: true
        generateReleaseNotes: true
